services:
  postgresql:
    build:
      context: ./backend
      dockerfile: Dockerfile.postgres  # Обновленное имя файла Dockerfile
    container_name: postgresql  # Имя контейнера
    restart: "no"

    environment:
      POSTGRES_USER: develop  # Имя пользователя БД
      POSTGRES_PASSWORD: develop  # Пароль пользователя
      POSTGRES_DB: bip  # Имя создаваемой БД

    volumes:
      - postgres_data:/var/lib/postgresql/data  # Сохраняем данные БД вне контейнера

    ports:
      - "5433:5432"  # Пробрасываем порт PostgreSQL (локальный 5433 → контейнерный 5432)

  bip_app:
    build:
      context: ./backend
      dockerfile: Dockerfile.app  # Используем Dockerfile.app для сборки
    container_name: bip_app
    restart: "no"
    depends_on:
      - postgresql  # Приложение зависит от базы данных
    ports:
      - "8080:8080"  # Пробрасываем порт приложения
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/bip
      SPRING_DATASOURCE_USERNAME: develop
      SPRING_DATASOURCE_PASSWORD: develop

  frontend:
    build:
      context: ./frontend
    ports:
      # - "8090:80"
      - "80:80"
      - "443:443"
    container_name: front
    restart: unless-stopped
  
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PIP_NO_CACHE_DIR=on
  

  captcha_server:
    build:
      context: ./captcha-service
      dockerfile: Dockerfile
    ports:
      - "33001:33001"
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    # убрали network_mode: host и pid: host
    ports:
      - "9100:9100"    # проброс метрик наружу
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev)($|/)"'

  # cAdvisor для детального мониторинга контейнеров и процессов
  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8082:8080"    # проброс метрик cAdvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "33000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  postgres_data:  # Определяем том для хранения данных
  grafana_data:

